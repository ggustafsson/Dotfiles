#!/usr/bin/env zsh

# Description: This script makes it easy to validate HTML files through
# http://validator.w3.org from the command line.
#
# I have this in ~/.vimrc so I can easily validate files inside of Vim:
# nnoremap <Leader>w3 :!~/Scripts/w3validator "%"<CR>
#
# Usage: w3validator <file(s)>
#
# Written by GÃ¶ran Gustafsson (gustafsson.g at gmail.com).
# License: BSD 3-Clause.

if [[ $# -eq 0 ]]; then
  echo "Usage: ${0:t} [FILENAME(S)]..."
  exit
fi

echo "Validating HTML file(s) using W3C's Markup Validation Service."

for arg; do
  if [[ ! -f $arg ]]; then
    echo "\nFile '${arg}' does not exist! Skipping..."
    continue
  fi

  print -P "\n%B%F{cyan}Checking file: ${arg/${HOME}/~}%f%b"

  # Changes the directory to where the file is. Otherwise upload won't work :(
  cd ${arg:A:h}
  results=$(curl --form "uploaded_file=@${arg:t};type=text/html" \
                 --form output=json --silent http://validator.w3.org/check)

  if [[ $? -gt 0 ]]; then
    echo "Failed at getting results! Exiting..."
    exit 1
  fi

  # Change back to the old directory. Otherwise the check for if the next file
  # exists will fail every time.
  cd -

  # Only work with lines that contain information about errors.
  parsed_results=$(echo $results | egrep "(\"lastLine\":|\"message\":)")

  if [[ ! -z $parsed_results ]]; then
    echo "Found error(s) on line(s):"

    # Modify output with "sed" the following ways:
    # 1. Remove spaces and tabs at beginning of lines.
    # 2. Replace lastLine with Line.
    # 3. Replace message with Message.
    # 4. Remove \" inside of messages.
    # 5. Remove , at end of lines.
    echo $parsed_results | \
      sed 's/^[ \t]*//;
           s/^"lastLine"/Line/;
           s/^"message"/Message/;
           s/\\"//g;
           s/,$//'
  else
    echo "No errors found!"
  fi
done
